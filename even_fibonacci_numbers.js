/**
 * Problem 2
 *
 * Each new term in the Fibonacci sequence is generated by adding the 
 * previous two terms. By starting with 1 and 2, the first 10 terms
 * will be:
 * 	1,2,3,5,8,13,21,34,55,89,...
 * 
 * By considering the terms in the Fibonacci sequence whose values
 * do not exceed four million, find the sum of the even-valued terms
 */

/**
 * Explicit formula to obtain every 
 * fibonacci number without loops
 *
 * Base formula:
 * 	f(x) = 1/sqrt(5) * ((1 + sqrt(5)) / 2)^x - 1/sqrt(5) * ((1 - sqrt(5)) / 2)^x
 * My simplified formula:
 * 	f(x) = ((1 + sqrt(5))^x - (1 - sqrt(5))^x) / (2^x * sqrt(5))
 *
 * https://es.wikipedia.org/wiki/Sucesi√≥n_de_Fibonacci
 */
function fibonacci(n) {
	let sqrt_five = Math.sqrt(5);
	let result = (
		Math.pow(1 + sqrt_five, n) - 
		Math.pow(1 - sqrt_five, n)
	) / (Math.pow(2, n) * sqrt_five);
	return Math.trunc(result);
}

/**
 * Every 3 numbers, the fibonacci value is even (3=2, 6=8, 9=34, ...)
 */
function calculate_sum(limit) {
	let sum = 0;
	let fib = 0;
	let i = 1;

	do {
		fib = fibonacci(3 * i++);
		sum += fib;
	} while(fib < limit);
	
	// Substract the last calculated fibonacci
	// In order to not exced the defined limit
	return sum - fib;
}

console.log('40', calculate_sum(40));
console.log('400', calculate_sum(400));
console.log('4000', calculate_sum(4000));
console.log('40000', calculate_sum(40000));
console.log('400000', calculate_sum(400000));
console.log('4000000', calculate_sum(4000000));
console.log('40000000', calculate_sum(40000000));
